function Show-MuFoLogResults {
    <#
    .SYNOPSIS
    Displays results from a previously generated MuFo log file.

    .DESCRIPTION
    Loads a MuFo results log, applies optional filters, and writes a
    summary plus individual records to the pipeline in the same format
    previously emitted directly from `Invoke-MuFo`.

    .PARAMETER LogTo
    Path to the log file generated by a prior MuFo run.

    .PARAMETER Action
    Optional filter to limit results to a specific action value.

    .PARAMETER MinScore
    Optional filter to limit results to items with a score greater than
    or equal to the specified threshold.

    .PARAMETER ShowEverything
    When provided, emits full records instead of the concise summary view.

    .PARAMETER Detailed
    Alternate switch that also requests full records (aliasing the old
    behavior in `Invoke-MuFo`).
    #>
    param(
        [Parameter(Mandatory = $false)]
        [string]$LogTo,

        [Parameter(Mandatory = $false)]
        [ValidateSet('rename', 'skip', 'error')]
        [string]$Action,

        [Parameter(Mandatory = $false)]
        [double]$MinScore = 0.0,

        [Parameter(Mandatory = $false)]
        [switch]$ShowEverything,

        [Parameter(Mandatory = $false)]
        [switch]$Detailed
    )

    if (-not $LogTo) {
        Write-Warning "-LogTo is required when using -ShowResults"
        return
    }

    if (-not (Test-Path -LiteralPath $LogTo)) {
        Write-Warning "Log file '$LogTo' not found"
        return
    }

    try {
        $data = Get-Content -LiteralPath $LogTo -Encoding UTF8 | ConvertFrom-Json
        $allItems = $data.Items
        $originalCount = if ($allItems) { $allItems.Count } else { 0 }

        $items = $allItems
        if ($Action) {
            $items = $items | Where-Object { $_.Action -eq $Action }
        }
        if ($MinScore -gt 0) {
            $items = $items | Where-Object { $_.Score -ge $MinScore }
        }

        Write-Host "`n=== MuFo Results Summary ===" -ForegroundColor Cyan
        Write-Host "Log file: $LogTo" -ForegroundColor Gray
        if ($data.Timestamp) { Write-Host "Generated: $($data.Timestamp)" -ForegroundColor Gray }
        if ($data.Path) { Write-Host "Original path: $($data.Path)" -ForegroundColor Gray }
        if ($data.Mode) { Write-Host "Mode: $($data.Mode), Threshold: $($data.ConfidenceThreshold)" -ForegroundColor Gray }

        if ($originalCount -gt 0) {
            $stats = $allItems | Group-Object -Property Action | Sort-Object Name
            Write-Host "`nSummary Statistics:" -ForegroundColor Yellow
            foreach ($stat in $stats) {
                $color = switch ($stat.Name) {
                    'rename' { 'Green' }
                    'skip' { 'Yellow' }
                    'error' { 'Red' }
                    default { 'White' }
                }
                Write-Host "  $($stat.Name): $($stat.Count)" -ForegroundColor $color
            }

            if ($Action -or $MinScore -gt 0) {
                $filteredCount = if ($items) { $items.Count } else { 0 }
                Write-Host "`nFiltered Results: $filteredCount of $originalCount items" -ForegroundColor Cyan
                if ($Action)   { Write-Host "  Action filter: $Action" -ForegroundColor Gray }
                if ($MinScore -gt 0) { Write-Host "  MinScore filter: $MinScore" -ForegroundColor Gray }
            }
        }
        else {
            Write-Host "No items found in log file." -ForegroundColor Yellow
        }

        if ($items -and $items.Count -gt 0) {
            Write-Host "`n--- Results ---" -ForegroundColor Cyan
        }

        foreach ($item in $items) {
            $wantFull = ($ShowEverything -or $Detailed)
            if (-not $wantFull) {
                $objDisplay = [PSCustomObject]([ordered]@{
                    LocalArtist   = $item.LocalArtist
                    SpotifyArtist = $item.Artist
                    LocalFolder   = $item.LocalFolder
                    LocalAlbum    = $item.LocalAlbum
                    SpotifyAlbum  = $item.SpotifyAlbum
                    NewFolderName = $item.NewFolderName
                    Decision      = $item.Decision
                    ArtistSource  = $item.ArtistSource
                })
                Write-Output $objDisplay
            }
            else {
                Write-Output $item
            }
        }
    }
    catch {
        Write-Warning "Failed to read or parse log file '$LogTo': $($_.Exception.Message)"
    }
}

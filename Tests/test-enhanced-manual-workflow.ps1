#!/usr/bin/env pwsh
#Requires -Version 7.3

<#
.SYNOPSIS
    Test the enhanced manual track mapping with automatic file opening.

.DESCRIPTION
    Tests the improved manual workflow with automatic file opening,
    playlist compatibility, and editor integration.

.NOTES
    Author: jmw
    Version: 1.0
    Date: 2025-01-11
    Tests: File opening, playlist format, editor integration
#>

[CmdletBinding()]
param(
    [string]$TestPath = "D:\_CorrectedMusic\10cc\1975 - The Original Soundtrack"
)

# Import MuFo module functions for testing
$moduleRoot = Split-Path $PSScriptRoot -Parent
Push-Location $moduleRoot

try {
    # Load the functions we're testing
    . ".\Public\Invoke-ManualTrackMapping.ps1"
    . ".\Private\New-TrackMapping.ps1"
    . ".\Private\Get-TrackTags.ps1"
    
    Write-Host "üß™ TESTING ENHANCED MANUAL TRACK MAPPING" -ForegroundColor Cyan
    Write-Host "=======================================" -ForegroundColor Cyan
    Write-Host ""

    if (-not (Test-Path $TestPath)) {
        Write-Warning "Test path not found: $TestPath"
        Write-Host "Creating mock test scenario..." -ForegroundColor Yellow
        
        # Create a temporary test folder with some mock files
        $tempPath = Join-Path $env:TEMP "MuFo-ManualTest"
        if (Test-Path $tempPath) { Remove-Item $tempPath -Recurse -Force }
        New-Item -ItemType Directory -Path $tempPath -Force | Out-Null
        
        # Create some dummy files to test with
        @("01 - Track One.mp3", "02 - Track Two.mp3", "03 - Track Three.mp3") | ForEach-Object {
            New-Item -ItemType File -Path (Join-Path $tempPath $_) -Force | Out-Null
        }
        
        $TestPath = $tempPath
        Write-Host "‚úÖ Created test folder: $TestPath" -ForegroundColor Green
    }

    Write-Host "üî¨ Test 1: Manual Mapping Generation (No Auto-Open)" -ForegroundColor Yellow
    Write-Host "=================================================" -ForegroundColor Yellow
    
    # Test without auto-opening files (for CI/automation compatibility)
    $result1 = Invoke-ManualTrackMapping -Action Generate -Path $TestPath -OutputName "test-mapping-noopen" -NoOpen
    
    if ($result1) {
        Write-Host "‚úÖ Files generated successfully" -ForegroundColor Green
        
        # Check if playlist file exists and validate format
        $playlistFile = "test-mapping-noopen.m3u"
        if (Test-Path $playlistFile) {
            $playlistContent = Get-Content $playlistFile
            Write-Host "üìã Playlist format validation:" -ForegroundColor Cyan
            Write-Host "   First line: $($playlistContent[0])" -ForegroundColor Gray
            Write-Host "   Contains #EXTM3U header: $(($playlistContent[0] -eq '#EXTM3U'))" -ForegroundColor Gray
            Write-Host "   Contains MuFo comment: $(($playlistContent -match 'Generated by MuFo').Count -gt 0)" -ForegroundColor Gray
            Write-Host "   Track entries: $(($playlistContent -match '#EXTINF').Count)" -ForegroundColor Gray
            Write-Host ""
            
            Write-Host "üéµ Playlist Compatibility:" -ForegroundColor Cyan
            Write-Host "   ‚úÖ VLC Media Player (supports standard M3U with #EXTINF)" -ForegroundColor Green
            Write-Host "   ‚úÖ foobar2000 (full M3U support)" -ForegroundColor Green
            Write-Host "   ‚úÖ Windows Media Player (basic M3U support)" -ForegroundColor Green
            Write-Host "   ‚úÖ iTunes/Music.app (standard M3U import)" -ForegroundColor Green
            Write-Host "   ‚úÖ Spotify (can import M3U playlists)" -ForegroundColor Green
            Write-Host "   ‚úÖ MPV, MPC-HC, Winamp (universal M3U support)" -ForegroundColor Green
            Write-Host ""
        } else {
            Write-Warning "Playlist file not created: $playlistFile"
        }
        
        # Check mapping file
        $mappingFile = "test-mapping-noopen.txt"
        if (Test-Path $mappingFile) {
            $mappingContent = Get-Content $mappingFile
            Write-Host "üìù Mapping file validation:" -ForegroundColor Cyan
            Write-Host "   Contains instructions: $(($mappingContent -match 'Edit this file').Count -gt 0)" -ForegroundColor Gray
            Write-Host "   Contains format guide: $(($mappingContent -match 'TrackNumber\. Title').Count -gt 0)" -ForegroundColor Gray
            Write-Host "   Track entries: $(($mappingContent -match '^\d+\.').Count)" -ForegroundColor Gray
            Write-Host ""
        } else {
            Write-Warning "Mapping file not created: $mappingFile"
        }
        
        # Cleanup test files
        Remove-Item $playlistFile -ErrorAction SilentlyContinue
        Remove-Item $mappingFile -ErrorAction SilentlyContinue
    }

    Write-Host "üî¨ Test 2: Editor Environment Detection" -ForegroundColor Yellow
    Write-Host "=====================================" -ForegroundColor Yellow
    
    Write-Host "Environment detection:" -ForegroundColor Cyan
    Write-Host "   \$env:EDITOR: $($env:EDITOR)" -ForegroundColor Gray
    Write-Host "   Interactive mode: $($null -ne $Host.UI.RawUI)" -ForegroundColor Gray
    Write-Host "   CI environment: $($env:CI)" -ForegroundColor Gray
    Write-Host "   Automation flag: $($env:AUTOMATION)" -ForegroundColor Gray
    Write-Host ""
    
    Write-Host "üîß Editor Integration Options:" -ForegroundColor Cyan
    Write-Host "   Priority 1: \$env:EDITOR (if set) - respects user preference" -ForegroundColor White
    Write-Host "   Priority 2: Invoke-Item - uses Windows file associations" -ForegroundColor White
    Write-Host "   Common editors that set \$env:EDITOR:" -ForegroundColor Gray
    Write-Host "      - VS Code: code" -ForegroundColor Gray
    Write-Host "      - Vim: vim" -ForegroundColor Gray
    Write-Host "      - Helix: hx" -ForegroundColor Gray
    Write-Host "      - Nano: nano" -ForegroundColor Gray
    Write-Host "      - Notepad++: notepad++" -ForegroundColor Gray
    Write-Host ""

    Write-Host "üî¨ Test 3: File Opening Modes" -ForegroundColor Yellow
    Write-Host "============================" -ForegroundColor Yellow
    
    Write-Host "Manual workflow supports these modes:" -ForegroundColor Cyan
    Write-Host "   Default: Auto-open files unless in CI/automation" -ForegroundColor White
    Write-Host "   -OpenFiles: Force open files even in automation" -ForegroundColor White
    Write-Host "   -NoOpen: Never auto-open files (CI-friendly)" -ForegroundColor White
    Write-Host ""
    
    Write-Host "Example usage:" -ForegroundColor Cyan
    Write-Host "   # Interactive use (auto-opens files)" -ForegroundColor Yellow
    Write-Host "   Invoke-ManualTrackMapping -Action Generate -Path 'C:\\Music\\Album' -OutputName 'mapping'" -ForegroundColor Gray
    Write-Host ""
    Write-Host "   # Force open files" -ForegroundColor Yellow  
    Write-Host "   Invoke-ManualTrackMapping -Action Generate -Path 'C:\\Music\\Album' -OutputName 'mapping' -OpenFiles" -ForegroundColor Gray
    Write-Host ""
    Write-Host "   # Automation/CI friendly (no file opening)" -ForegroundColor Yellow
    Write-Host "   Invoke-ManualTrackMapping -Action Generate -Path 'C:\\Music\\Album' -OutputName 'mapping' -NoOpen" -ForegroundColor Gray
    Write-Host ""

    # Cleanup temp directory if we created it
    if ($TestPath.StartsWith($env:TEMP)) {
        Remove-Item $TestPath -Recurse -Force -ErrorAction SilentlyContinue
        Write-Host "üßπ Cleaned up temporary test files" -ForegroundColor Gray
    }

    Write-Host "‚úÖ Enhanced manual track mapping testing complete!" -ForegroundColor Green
    Write-Host ""
    Write-Host "üéØ Key Improvements:" -ForegroundColor Cyan
    Write-Host "   ‚Ä¢ Automatic file opening with intelligent defaults" -ForegroundColor White
    Write-Host "   ‚Ä¢ Universal M3U playlist format (VLC, foobar, WMP, etc.)" -ForegroundColor White
    Write-Host "   ‚Ä¢ \$env:EDITOR support with system fallback" -ForegroundColor White
    Write-Host "   ‚Ä¢ CI/automation friendly modes (-NoOpen)" -ForegroundColor White
    Write-Host "   ‚Ä¢ Better user experience with emoji and clear instructions" -ForegroundColor White
    Write-Host ""

} catch {
    Write-Error "Test failed: $($_.Exception.Message)"
    Write-Error $_.ScriptStackTrace
} finally {
    Pop-Location
}